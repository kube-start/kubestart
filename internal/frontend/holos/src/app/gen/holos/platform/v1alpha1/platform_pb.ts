// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file holos/platform/v1alpha1/platform.proto (package holos.platform.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Detail } from "../../object/v1alpha1/object_pb.js";

/**
 * @generated from message holos.platform.v1alpha1.Platform
 */
export class Platform extends Message<Platform> {
  /**
   * Unique id assigned by the server.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Owner of the platform.
   *
   * @generated from field: holos.platform.v1alpha1.Owner owner = 2;
   */
  owner?: Owner;

  /**
   * name is the platform short name as a dns label.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: optional string display_name = 4;
   */
  displayName?: string;

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * @generated from field: optional holos.platform.v1alpha1.Spec spec = 6;
   */
  spec?: Spec;

  /**
   * @generated from field: optional holos.object.v1alpha1.Detail detail = 8;
   */
  detail?: Detail;

  constructor(data?: PartialMessage<Platform>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.platform.v1alpha1.Platform";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "message", T: Owner },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "spec", kind: "message", T: Spec, opt: true },
    { no: 8, name: "detail", kind: "message", T: Detail, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Platform {
    return new Platform().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Platform {
    return new Platform().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Platform {
    return new Platform().fromJsonString(jsonString, options);
  }

  static equals(a: Platform | PlainMessage<Platform> | undefined, b: Platform | PlainMessage<Platform> | undefined): boolean {
    return proto3.util.equals(Platform, a, b);
  }
}

/**
 * Owner of a platform.
 *
 * @generated from message holos.platform.v1alpha1.Owner
 */
export class Owner extends Message<Owner> {
  /**
   * @generated from oneof holos.platform.v1alpha1.Owner.owner
   */
  owner: {
    /**
     * @generated from field: string org_id = 1;
     */
    value: string;
    case: "orgId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Owner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.platform.v1alpha1.Owner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "owner" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Owner {
    return new Owner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Owner {
    return new Owner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Owner {
    return new Owner().fromJsonString(jsonString, options);
  }

  static equals(a: Owner | PlainMessage<Owner> | undefined, b: Owner | PlainMessage<Owner> | undefined): boolean {
    return proto3.util.equals(Owner, a, b);
  }
}

/**
 * Spec represents the top level specification of a Platform.
 *
 * @generated from message holos.platform.v1alpha1.Spec
 */
export class Spec extends Message<Spec> {
  /**
   * model represents the user-defined and user-supplied form field values.
   * The model is a Struct to ensure any valid JSON object defined by the user
   * via the form can be represented and stored.
   *
   * @generated from field: google.protobuf.Struct model = 1;
   */
  model?: Struct;

  /**
   * @generated from field: optional holos.platform.v1alpha1.Form form = 2;
   */
  form?: Form;

  constructor(data?: PartialMessage<Spec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.platform.v1alpha1.Spec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: Struct },
    { no: 2, name: "form", kind: "message", T: Form, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spec {
    return new Spec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJsonString(jsonString, options);
  }

  static equals(a: Spec | PlainMessage<Spec> | undefined, b: Spec | PlainMessage<Spec> | undefined): boolean {
    return proto3.util.equals(Spec, a, b);
  }
}

/**
 * Form represents the Formly input form.
 *
 * @generated from message holos.platform.v1alpha1.Form
 */
export class Form extends Message<Form> {
  /**
   * fields represents FormlyFieldConfig[] encoded as an array of JSON objects
   * organized by section.
   *
   * @generated from field: repeated google.protobuf.Struct field_configs = 1;
   */
  fieldConfigs: Struct[] = [];

  constructor(data?: PartialMessage<Form>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "holos.platform.v1alpha1.Form";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_configs", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Form {
    return new Form().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Form {
    return new Form().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Form {
    return new Form().fromJsonString(jsonString, options);
  }

  static equals(a: Form | PlainMessage<Form> | undefined, b: Form | PlainMessage<Form> | undefined): boolean {
    return proto3.util.equals(Form, a, b);
  }
}

